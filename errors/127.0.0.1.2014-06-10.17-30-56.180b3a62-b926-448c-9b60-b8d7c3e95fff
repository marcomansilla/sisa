(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> 'lazyT' object is not callable"
p3
sS'layer'
p4
S'/home/marco/trabajo/experimental/web2py/applications/sisapretty/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n@auth.requires_login()\ndef index():\n    return dict()\n\n@auth.requires_login()\ndef clientes():\n    response.subtitle+=\' Clientes\'\n    clientes=db(db.clientes.id>0).select()\n    nCliente=SQLFORM(db.clientes)\n\n    if nCliente.process().accepted:\n        redirect(URL(\'default\',\'clientes\'))\n    elif nCliente.errors:\n        response.flash="El formulario tiene errores"\n    return dict(clientes=clientes, nCliente=nCliente)\n\n@auth.requires_login()\ndef fumigadores():\n    response.subtitle+=\' Fumigadores\'\n    fumigadores=db(db.fumigadores.id>0).select()\n\n    nFumigador=SQLFORM(db.fumigadores)\n\n    if nFumigador.process().accepted:\n        redirect(URL(\'default\',\'fumigadores\'))\n    elif nFumigador.errors:\n        response.flash(\'Por favor revise los datos ingresados\')\n    \n    return dict(fumigadores=fumigadores, nFumigador=nFumigador)\n\n@auth.requires_login()\ndef cobros():\n    response.subtitle+= \' Cobros pendientes\'\n    cobros=db((db.cobros.id>0)&(db.cobros.certificado==db.certificados.id)&(db.establecimientos.cliente==db.clientes.id)&(db.establecimientos.id==db.certificados.establecimiento)).select()\n    return dict(cobros=cobros)\n\n@auth.requires_login()\ndef vencimientos():\n    establecimientos=db((db.establecimientos.id>0)&(db.clientes.id==db.establecimientos.cliente)).select()\n    return dict(establecimientos=establecimientos)\n    \ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(fumigadores)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/marco/trabajo/experimental/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/home/marco/trabajo/experimental/web2py/applications/sisapretty/controllers/default.py", line 106, in <module>\n  File "/home/marco/trabajo/experimental/web2py/gluon/globals.py", line 389, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/marco/trabajo/experimental/web2py/gluon/tools.py", line 3337, in f\n    return action(*a, **b)\n  File "/home/marco/trabajo/experimental/web2py/applications/sisapretty/controllers/default.py", line 38, in fumigadores\n    response.flash(\'Por favor revise los datos ingresados\')\nTypeError: \'lazyT\' object is not callable\n'
p11
s.